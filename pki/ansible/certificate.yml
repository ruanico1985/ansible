---

- name: Create a server certificate with a CN and some SubjectAlternativeName
  connection: local
  gather_facts: false
  hosts: localhost
  vars:
    cn: mywebapp.mydomain.com
    san: "DNS:apache1.mydomain.com,DNS:apache2.mydomain.com"
  tasks:

  - name: "Create the private key for {{ cn }}"
    openssl_privatekey:
      path: "/pki/ca/intermediate/newcerts/{{ cn }}.key"

  - name: "Create the certificate signing request for {{ cn }}"
    openssl_csr:
      path: "/pki/ca/intermediate/newcerts/{{ cn }}.csr"
      privatekey_path: "/pki/ca/intermediate/newcerts/{{ cn }}.key"
      country_name: ES
      email_address: miMail@mydomain.com
      locality_name: Madrid
      state_or_province_name: Madrid
      organization_name: MyDomain
      organizational_unit_name: IT Department
      subject_alt_name: "{{ san }}"
      common_name: "{{ cn }}"
      state: present

  - name: "Check if existing certificate for {{ cn }} has a validity period of 30 days yet"
    openssl_certificate:
      provider: assertonly
      path: "/pki/ca/intermediate/newcerts/{{ cn }}.pem"
      valid_at: "+30d"
    register: expiring
    ignore_errors: true

  # This task is with command, because openssl module does not support CRL integration of config file usage
  - name: "Revoke existing certificate for {{ cn }}"
    command:
      argv:
        - /usr/bin/openssl
        - ca
        - -revoke
        - /pki/ca/intermediate/newcerts/{{ cn }}.pem
        - -key
        - 5678
        - -batch
        - -config
        - /pki/ca/intermediate/openssl.cnf
    when: expiring is failed
    ignore_errors: true

  # This task is with command, because openssl module does not support CRL integration of config file usage
  - name: "Update CRL after revoking the existing certificate for {{ cn }}"
    command:
      argv:
        - /usr/bin/openssl
        - ca
        - -config
        - /pki/ca/intermediate/openssl.cnf
        - -gencrl
        - -crldays
        - 30
        - -out
        - /pki/ca/intermediate/crl.pem
    when: expiring is true

  - name: "Remove existing certificate file for {{ cn }} after revoking it"
    file:
      path: "/pki/ca/intermediate/newcerts/{{ cn }}.pem"
      state: absent
    when: expiring is failed

  # This task is with command, because openssl module does not support config file usage
  - name: CREAPEM
    command:
      argv:
        - /usr/bin/openssl
        - ca
        - -cert
        - /pki/ca/intermediate/certs/intermediate.cert.pem
        - -keyfile
        - /pki/ca/intermediate/private/intermediate.key.pem
        - -in
        - /pki/ca/intermediate/newcerts/{{ cn }}.csr
        - -out
        - /pki/ca/intermediate/newcerts/{{ cn }}.pem
        - -key
        - XXXX # Private key password of the intermediate CA Cert
        - -batch
        - -config
        - /pki/ca/intermediate/openssl.cnf
    when: expiring is failed

  - name: "Create PKCS12 for {{ cn }}"
    openssl_pkcs12:
      action: export
      path: "/pki/ca/intermediate/newcerts/{{ cn }}.pfx"
      friendly_name: "{{ cn }}"
      privatekey_path: "/pki/ca/intermediate/newcerts/{{ cn }}.key"
      certificate_path: "/pki/ca/intermediate/newcerts/{{ cn }}.pem"
      other_certificates: /pki/ca/intermediate/certs/ca-chain.cert.pem
      passphrase: "XXXXX" # Passphrase for the pkcs12
      state: present
